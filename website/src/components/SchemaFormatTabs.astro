---
import { Code } from "@astrojs/starlight/components";
import { Tabs, TabItem } from "@astrojs/starlight/components";
import { readFileSync } from "fs";
import { join, dirname } from "path";

/**
 * Configuration for a code block to be displayed in a tab.
 * Either provide a literal code string or a file path with optional line range.
 */
interface CodeBlockConfig {
  /** A literal code block to display. If provided, file properties are ignored. */
  code?: string;
  /** Configuration for reading code from a file */
  file?: {
    /** Path to the file relative to the repository root */
    path: string;
    /** Starting line number (1-based) to extract code from */
    startLine?: number;
    /** Ending line number (1-based) to extract code from */
    endLine?: number;
  };
}

/**
 * Props for the SchemaFormatTabs component.
 * Each prop represents a different tab that can be displayed.
 */
interface Props {
  /** Example JSON code block to display in the "Example" tab */
  example?: CodeBlockConfig;
  /** JSON Schema code block to display in the "JSON Schema" tab */
  jsonSchema?: CodeBlockConfig;
  /** TypeSpec code block to display in the "TypeSpec" tab */
  typeSpec?: CodeBlockConfig;
  /** Python code block to display in the "Python" tab */
  python?: CodeBlockConfig;
}

const { example, jsonSchema, typeSpec, python } = Astro.props;

// Validate that at least one tab is provided
if (!example && !jsonSchema && !typeSpec && !python) {
  throw new Error("SchemaFormatTabs requires at least one tab to be provided");
}

const exampleCode = example ? extractCode(example) : null;
const jsonSchemaCode = jsonSchema ? extractCode(jsonSchema) : null;
const typeSpecCode = typeSpec ? extractCode(typeSpec) : null;
const pythonCode = python ? extractCode(python) : null;

/**
 * Extracts code from either a literal string or a file.
 * @param props - The code block configuration
 * @returns The extracted code as a string
 * @throws Error if file cannot be read or if neither code nor file is provided
 */
function extractCode(props: CodeBlockConfig): string {
  if (props.code) {
    return props.code;
  }
  if (props.file) {
    try {
      const websiteRoot = process.cwd();
      const repoRoot = dirname(websiteRoot);
      const filePath = join(repoRoot, props.file.path);
      const content = readFileSync(filePath, "utf-8");

      if (props.file.startLine || props.file.endLine) {
        const lines = content.split("\n");
        const start = props.file.startLine ? props.file.startLine - 1 : 0;
        const end = props.file.endLine ? props.file.endLine : lines.length;
        return lines.slice(start, end).join("\n");
      }

      return content;
    } catch (error) {
      // TODO: @widal001 (2025-08-04) Switch back to throwing an error
      // This is a temporary fix to allow the website to build without errors
      // while we update the schema docs to use the latest SDK.
      console.error(`Error reading file ${props.file.path}: ${error}`);
      return "";
    }
  }
  throw new Error("Either code or file must be provided");
}
---

<Tabs>
  {
    exampleCode && (
      <TabItem label="Example">
        <p>A JSON example of this model.</p>
        <Code code={exampleCode} lang="json" />
      </TabItem>
    )
  }
  {
    jsonSchemaCode && (
      <TabItem label="JSON Schema">
        <p>The JSON Schema for this model.</p>
        <Code code={jsonSchemaCode} lang="yaml" />
      </TabItem>
    )
  }
  {
    typeSpecCode && (
      <TabItem label="TypeSpec">
        <p>The TypeSpec code for this model.</p>
        <Code code={typeSpecCode} lang="typespec" />
      </TabItem>
    )
  }
  {
    pythonCode && (
      <TabItem label="Python">
        <p>The Python code for this model.</p>
        <Code code={pythonCode} lang="python" />
      </TabItem>
    )
  }
</Tabs>
