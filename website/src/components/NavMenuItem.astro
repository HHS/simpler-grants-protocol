---
export interface Props {
  label: string;
  items: Array<{
    label: string;
    href: string;
  }>;
}

const { label, items } = Astro.props;
---

<div class="nav-menu-item">
  <button class="nav-menu-button" aria-haspopup="true">
    {label}
    <svg
      class="nav-menu-arrow"
      width="12"
      height="12"
      viewBox="0 0 12 12"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
    >
      <path
        d="M3 4.5L6 7.5L9 4.5"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div class="nav-menu-dropdown">
    {
      items.map((item) => (
        <a href={item.href} class="nav-menu-link">
          {item.label}
        </a>
      ))
    }
  </div>
</div>

<style>
  .nav-menu-item {
    position: relative;
    display: inline-block;
  }

  .nav-menu-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: none;
    border: none;
    color: var(--sl-color-text);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    border-radius: 0.375rem;
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
  }

  .nav-menu-button:hover {
    background-color: var(--sl-color-hairline);
    color: var(--sl-color-accent);
  }

  .nav-menu-button:focus {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
  }

  .nav-menu-item:focus-within .nav-menu-button {
    background-color: var(--sl-color-hairline);
    color: var(--sl-color-accent);
  }

  .nav-menu-item:focus-within .nav-menu-arrow {
    transform: rotate(180deg);
  }

  .nav-menu-arrow {
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  .nav-menu-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    min-width: 12rem;
    background-color: var(--sl-color-bg);
    border: 1px solid var(--sl-color-hairline-shade);
    border-radius: 0.5rem;
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-0.5rem);
    transition:
      opacity 0.2s ease,
      visibility 0.2s ease,
      transform 0.2s ease;
    padding: 0.5rem 0;
    margin-top: 0.25rem;
  }

  .nav-menu-item:focus-within .nav-menu-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .nav-menu-link {
    display: block;
    padding: 0.75rem 1rem;
    color: var(--sl-color-text);
    text-decoration: none;
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
    border: none;
    background: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .nav-menu-link:hover,
  .nav-menu-link:focus {
    background-color: var(--sl-color-hairline);
    color: var(--sl-color-accent);
    outline: none;
  }

  .nav-menu-link:focus {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: -2px;
  }

  /* Dark mode adjustments */
  :global(.dark) .nav-menu-dropdown {
    background-color: var(--sl-color-bg);
    border-color: var(--sl-color-hairline-shade);
  }
</style>

<script>
  // Simple click handler to prevent default button behavior
  document.addEventListener("DOMContentLoaded", () => {
    const navButtons = document.querySelectorAll(".nav-menu-button");

    navButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        // Prevent default button behavior - we want focus to move to dropdown
        e.preventDefault();
      });
    });
  });
</script>
