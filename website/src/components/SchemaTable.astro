---
import { SchemaLoader } from "../lib/schema-loader";
import type { SchemaSpec, JsonSchema } from "../lib/schema-loader";
import { SchemaDocMapper } from "../lib/schema-doc-mapper";
import { TableGenerator } from "../lib/table-generator";
import type { PropertyRow, EnumRow } from "../lib/table-generator";

const { spec } = Astro.props;

/**
 * Props for the SchemaTable component.
 */
interface Props {
  /** Schema specification object from frontmatter */
  spec: SchemaSpec;
}

// Schema documentation path getter
const getSchemaDocPath = (schemaName: string): string | undefined => {
  return SchemaDocMapper.getSchemaDocPath(schemaName);
};

/**
 * Main component logic with proper error handling
 */

// Validate schema spec
try {
  SchemaLoader.validateSchemaSpec(spec);
} catch (error) {
  console.error("Schema spec validation:", error);
  throw error;
}

// Load and parse the schema with error handling
let schemaData: JsonSchema;
if (spec.jsonSchema?.file?.path) {
  // Handle file-based schema
  const schemaPath = spec.jsonSchema.file.path;
  try {
    schemaData = SchemaLoader.loadSchema(schemaPath);
  } catch (error) {
    console.error(`Loading schema from ${schemaPath}:`, error);
    throw error;
  }
} else if (spec.jsonSchema?.code) {
  // Handle inline schema
  try {
    schemaData = SchemaLoader.loadInlineSchema(spec.jsonSchema!.code!);
  } catch (error) {
    console.error("Loading inline schema:", error);
    throw error;
  }
} else {
  throw new Error(
    "Schema spec must have either jsonSchema.file.path or jsonSchema.code",
  );
}

// Determine table type and generate rows with error handling
const isEnumSchema = SchemaLoader.isEnumSchema(schemaData);
const isObjectSchema = SchemaLoader.isObjectSchema(schemaData);

let tableRows: PropertyRow[] | EnumRow[] = [];
let tableHeaders: string[] = [];

if (isEnumSchema) {
  try {
    tableRows = TableGenerator.generateEnumRows(schemaData);
  } catch (error) {
    console.error("Generating enum table rows:", error);
    throw error;
  }
  tableHeaders = ["Value", "Description"];
} else if (isObjectSchema) {
  try {
    tableRows = TableGenerator.generatePropertyRows(
      schemaData,
      getSchemaDocPath,
    );
  } catch (error) {
    console.error("Generating property table rows:", error);
    throw error;
  }
  tableHeaders = ["Property", "Type", "Required", "Description"];
} else {
  throw new Error(
    `Unsupported schema type for table generation: ${schemaData.type}`,
  );
}
---

<div class="table-wrapper">
  <table>
    <thead>
      <tr>
        {tableHeaders.map((header) => <th>{header}</th>)}
      </tr>
    </thead>
    <tbody>
      {
        isEnumSchema
          ? (tableRows as EnumRow[]).map((row) => (
              <tr>
                <td>{row.value}</td>
                <td>{row.description}</td>
              </tr>
            ))
          : (tableRows as PropertyRow[]).map((row) => (
              <tr>
                <td>{row.property}</td>
                <td set:html={row.type} />
                <td>{row.required ? "Yes" : "No"}</td>
                <td>{row.description}</td>
              </tr>
            ))
      }
    </tbody>
  </table>
</div>
