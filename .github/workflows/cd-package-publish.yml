name: CD - Publish Release of Package

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  detect-package-type:
    runs-on: ubuntu-latest

    outputs:
      is-pysdk-release: ${{ steps.check.outputs.is-pysdk-release }}
      is-core-release: ${{ steps.check.outputs.is-core-release }}

    steps:
      - name: Check package type from release tag
        id: check
        run: |
          TAG_NAME="${{ github.event.release.tag_name }}"
          if [[ "$TAG_NAME" =~ ^common-grants-sdk@ ]]; then
            echo "is-pysdk-release=true" >> $GITHUB_OUTPUT
            echo "is-core-release=false" >> $GITHUB_OUTPUT
            echo "Detected PySDK package release: $TAG_NAME"
          elif [[ "$TAG_NAME" =~ ^@common-grants/core@ ]]; then
            echo "is-pysdk-release=false" >> $GITHUB_OUTPUT
            echo "is-core-release=true" >> $GITHUB_OUTPUT
            echo "Detected Core package release: $TAG_NAME"
          else
            echo "is-pysdk-release=false" >> $GITHUB_OUTPUT
            echo "is-core-release=false" >> $GITHUB_OUTPUT
            echo "Unknown package type: $TAG_NAME"
          fi

  publish-pysdk:
    needs: detect-package-type
    if: needs.detect-package-type.outputs.is-pysdk-release == 'true'

    runs-on: ubuntu-latest
    environment: pypi-publish

    defaults:
      run:
        working-directory: lib/python-sdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Install dependencies
        run: poetry install

      - name: Run linting
        run: poetry run ruff check .

      - name: Run type checking
        run: poetry run mypy .

      - name: Run tests
        run: poetry run pytest

      - name: Build and publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry build
          poetry publish --dry-run

      - name: Notify completion
        run: |
          echo "Python package published to PyPI"
          echo "Release: ${{ github.event.release.name }}"
          echo "Tag: ${{ github.event.release.tag_name }}"

  publish-core:
    needs: detect-package-type
    if: needs.detect-package-type.outputs.is-core-release == 'true'

    runs-on: ubuntu-latest
    environment: npm-publish

    defaults:
      run:
        working-directory: lib/core

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Install dependencies
        run: npm ci

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Run checks
        run: npm run checks

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --dry-run

      - name: Notify completion
        run: |
          echo "Core package published to npm"
          echo "Release: ${{ github.event.release.name }}"
          echo "Tag: ${{ github.event.release.tag_name }}"
